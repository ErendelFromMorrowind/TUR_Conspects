Сиситемный архитектор получает на вход ТЗ, а выдаёт из себя две основные вещи.
Во-первых, много маленьких ТЗ, которые раздаются программистам, которые им будут заниматься;
Во-вторых, документ, который рассказывает, что и как будет происходить в разработке. По сути, документация. Это должно дать возможность дорабатывать проект даже с теми, кто не писал его;

Этапы проектирования:
1. Архитектурное проектирование
  Проектирование интерфейсов каждой подсистемы. Если проще, каждая задача получается в виде блока со входом-выходом, после чего прописываются их взаимодействия;
  Если каждая задача программируема, они программируются. Если же они всё ещё слишком комплексны, процесс начинается сначала;
Свойства хорошей архитектуры:
  Устроена иерархически, то есть компоненты состоят из компонентов поменьше;
  На каждом уровне независима. Люди не должны видеть чужой код, но вполне мочь работать с ним;
  Модульность. Каждый модуль скомпилирован и не требует пересборки системы.
    Выделяются модули по выполняемой функции и независимости от остальных;
  Не содержит ничего лишнего и повторяющегося;

2. Спецификация каждой подсистемы;
  ТЗ для каждого блока архитектуры. При этом надо помнить о существовании библиотек, так что лишнего кода писать не следует. Зачастую, так же, вместпе с ТЗ даются предполагаемые методы решения задачи;

3. Проектирование структур данных;
  Основная задача в том, чтобы превратить реальные объекты в программные -- классы, массивы и так далее;
  При чтении ТЗ имеет смысл составлять *словарь данных*, в который вы записываете то, что, по-вашему, будет структурой. Потом вы по нему проходитесь и корректируете, вплоть до осознания того, что это нечто -- вообще не структура данных;
  Этот кусок работы занимает очень большое количество времени, являясь чуть ли не четвертью работы;

4. Проектирование алгоритмов;
  Разбор задач на "Тут используем библиотечку, тут пишем Джарвис, тут думайте сами";


Первые два пункта практически всегда делаются системным архитектором, а вот остальные два зачастую делигируются программистам с меньшей квалификацией, но бОльшими знаниями в области программирования;
