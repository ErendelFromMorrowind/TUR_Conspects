В программную систему входит всё, что можно назвать словом "Софт" -- как сама программа, так и, к примеру, данные, используемые в ней;

Соответствие выполненной работы ТЗ -- не всегда индикатор хорошо выполненной работы. ТЗ должно быть выполнено, но есть разные уровни качества выполнения, затрагивающие другие сферы;
Понятия хорошего и плохого делятся на два уровня:
  Уровень пользователя
  Уровень разработчика

К примеру, код, построенный на костылях, пользователя волновать не будет, а заказчику, который, возможно, захочет модифицировать код в будущем, это намного важнее, ведь костыльный код менять намного сложнее, а, следовательно, дороже;
  Для пользователя самое главное -- работоспособность.

  На втором месте функциональная полонота. Программа должна выполнят свои функции. При этом важно расставлять приоритеты, понимая, чему лучше всего отдать больше всего времени, и что будет наиболее критическим в случае поломки;

//Худший вариант на защите -- почти полный код, который не запускается. Намного лучше получить рабочий, но не польностью функциональный предмет;

  Пользователю важно и удобство в использовании. Если, к примеру, у вас функциональная программа, которая работает исключительно через терминал, популярности она, скорее всего, не сыщет.
  Самая большая проблема этого пункта -- субъективность. Угодить всем практически невозможно, люди слишком разные;

  Дизайн. Тоже относительное понятие. Важно также помнить, что вы разрабатываете, и не использовать дизайн игры для корпоративных систем;

  Надёжность. Стабильность работы должна быть рассчитана в зависимотсти от приоритетов. К примеру, падающий по разу в месяц стриминговый сервис погоды не сделают, а если рухнет система жизнеобсепеения, станет грустно;
  Надо и не перегнуть, и остаться в рамках нормального опыта пользования;
  Перед запуском необходимо тестировать ваше приложение. Без него адекватной надёжности не получится;

  Эффективность. Быстродействие, использование ресурсов. Достигается при помощи оптимизации и тестировки. Это дорого, но надо соблюсти баланс;
  Особенно усердно думать про оптимизацию надо, если продукт будет использоваться широким кругом пользователей с разными системными характеристиками;
  Оптимизация также важна в железном плане. К примеру, процессоры, которые уже близки к пиковой на данной момент мощности, сейчас оптимизируются в сторону энергоэффективности. Код также влияет на потребление энергии.
  Если вы пишете, к примеру, код для микроконтроллера, об этом думать надо и много;


Для разработчика важны другие параметры:
  Читаемость кода. Код должен быть понятен другому человеку. В идеале программу должен смочь модифицировать кто угодно. К примеру, при сменяемости кадров нечиатемый код будет тратить лишние время и деньги.
  Также это будет очень полезно, если, вдруг, придётся включать новых людей в проект во время его разработки и поддержки;
  Несмотря на это, надо помнить, что высокая эффективность часто вредит читаемости. Всегда нужно соблюдать баланс между этим. В стандартных ситуациях выбор идёт в пользу читаемости;

  Низкая сложность и отсутствие лишних конструкций. К примеру, разбиение на функции повторяющихся участков кода. Если у вас не разбит код, а вам надо поменять его в пяти местах, огромное количество времени уйдёт на отладку и поиск ошибок.
  Если процесс делается много раз и он не одинаков, часто происходят катастрофы;

  Гибкость. Параметр, отвечающий за то, насклоько легко изменить код, если такая необходимость появится. Надо думать на несколько шагов вперёд, но нельзя забывать, что продумывание -- это деньги, а шаги могут и не произойти;

  Структурированность. Разбиение разных задач или подзадач. Их можно разбивать по функциям, классам, файлам и так далее. Каждый кусок кода небольшой, его просто отлаживать и менять. Он не мешает, когда вы заняты чем-то другим;

  Наличие кода, который можно использовать повторно. К примеру, компании, занимающийся разработкой сайтов, на которых есть авторизация, очень полезно иметь написанный кусок кода, отвечающий за неё, и используемый в дальнейших проектах;

  Документированность. Описание того, как работать с кодом. Описание принципов, логики работы кода и так далее;
  
