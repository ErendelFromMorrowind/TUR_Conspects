Изначально работа системного архитектора фиксировалась в текстовом виде. Это было неудобно по многим причинам;

Идею выражать всё схематично была позаимствована из электроники и изначально появилась в виде блок-схем, демонстрировавших алгоритмы;
Уже её проблема оказалась в том, что алгоритмы, которые отображались таким способом, должны были быть достаточно простыми;

Кроме блок-схем появились схемы баз данных;


Через некоторе время Гради Буч, Джеймс Рамбо и Ивар Якобсон написали книгу "Язык UML"
Расшифровывается он как Unified Modeling Language
По сути, являлся достаточно универсальным языком для моделирования проектов;

У него есть два свойства:
    1. Подходит не только для моделирования программных продуктов, но и для описания процессов предметной области;
    2. Не привязан ни к одному ЯП, но предполагает исопльзование ООП;



		Виды UML-диаграмм (гдe диаграмма=схема)
Делятся на две категории:
    1. Статические;
    2. Динамическая;


    1. Use case diagram (вариант использования, сценарий выполнения, диаграмма прецедентов). Динамическая
        Рассматриваем с точки зрения пользователя, не думая о том, что внутри;
        По сути представляет собой user stories в виде графа;
        Полезна в первую очередь тестировщикам;

    2. Class diagram (диаграмма классов, статическая структура). Статическая;
        Используются для первращения данных в объекты программирования (калссы, переменные, массивы и так далее)

    3. Sequence diagram (диаграмма последовательности). Динамичемкая;
        То, как между созданными объектами передаётся информация;

    4. State chart (таблица состояний). Динамическая;
        Записываются все состояния программы, в которых она может существовать, и способы перехода между ними;
        При этом каждое состояние достаточно пассивно и представляет собой ожидание какого-то сигнала.

    5. Activiеty diagram (диаграмма деятельности). Динамическая;
        По сути, является блок-схемой со сложынми алгоритмами.

   (6.) Collaboration diagram; (1.0)
        Cooperation diagram; (2.0)
        Динамическая;
        Иллюстрирует распределение ролей в работе между участниками проекта;
        Имеет достаточно мало пользы.

    7. Companent diagram (диаграмма компанентов). Статическая;
       Показывает, по сути, из каких файлов состоит проект и их функции;

    8. Deployment diagram (диагрмма развёртки). Статическая;
       Очень похожа на диаграмму компонентов, но показывает, где какие компаненты находятся. Условно, часть кода на сервере, а часть -- на устройстве пользователя;



Для редактирования обычно используется Microsoft Visio, сервис, используемый для построения огромного количества разных схем;
Альтернатива -- OpenOffice Draw. Имеет очень базовый функицонал и довольно глючная, но открытая и есть под UNIX'ом;
Третий вариант -- веб-редакторы. К примеру, visual paradigm. Они хороши тем, что диаграммы можно присылать ссылками;
 
