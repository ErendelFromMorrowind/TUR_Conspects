Результатом работы должен стать документ, в котором всё подробно расписано.


Есть несколько вариантов появления ТЗ;
  Заказные проекты;
  Занимается всем аналитик, который, собственно, и составляет ТЗ. При этом он ещё и должен мягко направить заказчика в нужное русло, учитывая, что он не эксперт в предметной области;
  На этапе обсуждения происходит много встречь. Разговоры в них надо или конспектировать, или даже записывать, а после разговора переспрашивать в кратком виде. Невозможно запомнить всё после встречи;
  Зачастую приходится узнавать что-то про предметную область, которая относится к проекту. Иногда для этого приходится привлекать консультантов, и это хорошо;

  Заказные проекты делятся на две группы:

    Заказные проекты, рассчитанные на широкого пользователя.
      Хороший пример -- интернет-магазин. Заказ возникает у бизнесмена, а людей, которые будут пользоваться этим, много;
    Корпоративная система
      Круг пользователей знаком и ограничен корпорацией.

    Собственная разработка;
    ТЗ в стартапе всё ещё необходимо, ведь, особенно если работают несколько людей, может получиться невероятная путаница. Для формирования ТЗ в команде появляется человек, который берёт на себя роль аналитика и занимается ТЗ;
    Полезно использовать маозговой штурм. Результатом будут ответы на некоторые вопросы:

      Для кого и зачем мы это делаем?
      Какие функции наше нечто будет выполнять?
      Какие проблемы могут возникнуть?

    Необходимо мыслить трезво, и оставаться реалистами;

    На выходе получается, что логично, ТЗ;




      Состав технического задания (он же -- спецификация)

Начинается всё с видения проекта. Примерно страница текста. Описывается, какая программа нам нужна и что мы хотим получить в итоге. Оно часто может быть в виде презентации и зачастую направлена на заказчика;

Вторым этапам являются размышления о том, кто будет пользоаться этим сайтом, и том, что им нужно для комфортного пользования. Важно не забыть про тех, кто будет обеспечивать функциональность, а не только о тех, кто будет пользоваться напрямую;

Функции системы. То, что конкретно система делает. К примеру, для стриминого сервиса -- запуск трека, создание плейлиста, запуск плейлиста и так далее. Это самая нудная и объёмная часть ТЗ;
  Зачастую прописаны по схеме "Действие-отклик";
  Это основной и самый ресурсоёмкий этап;

Требования к внешним интерфейсам;
  Важный интерфейс -- пользовательский, GUI -- graphical user interface;
  Существует также и CUI -- console user interface;
  Но это вершина айсберга. По сути, интерфейс -- все способы, которыми программа общается со внешним миром. В основном это пользователи, но не только;

  К примеру, программы могут взаимодействовать с другими программами. Несмотря на, возможно, скудный интерфейс, программы обмениваются данными, обрабатывают их, для чего пишутся протоколы;

  Программы могут взаимодействовать даже с разработчиками, которые что-то дописывают. Для этого используется API -- application programming interface, который используется для каких-то плагинов. По сути, является набором функций, которые выполняются в облаке;

Нефункциональные требования;
  Представим, что есть программма, которая выдаёт Ж\Д билеты. Предположим, она проверяет билет, но делает это за 15 минут. Собственно, вот вам пример нефункциоанльного требования. Ещё к ним можно отнести безопасность или шифрование;
  Требования к ним варьтруются в зависимости от того, какая программма является продуктом;
  При этом надо не переусердствовать, оставшись в рамках разумного;

Проектные ограничения на время разработки тоже пишутся в ТЗ. К примеру, распорядок дней во время разработки, язык речи, документация и так далее. Всё то о чём, КАК происходит разрабоотка, не особо касаясь того, ЧТО разрабатывается;


Иногда ТЗ пишется по какой-то готовой разработке, по которой мало докуменатции. Такое часто бывает с полузаброшенными проектами, которые надо подхватить;
